{"version":3,"sources":["index.js","pagemodule.js","cloudbase.js","utils.js","framework.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AFMA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AJYA,ACHA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ADIA,AENA,AHSA,AENA;ACFA,AHSA,AENA;ACFA,AHSA,AENA;ACFA,AHSA,AENA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloudbase = exports.isInvokeByCloudFunction = exports.callSelfDefinedMethod = exports.init = exports.pageModule = exports.PageModule = void 0;\nconst pagemodule_1 = require(\"./pagemodule\");\nvar pagemodule_2 = require(\"./pagemodule\");\nObject.defineProperty(exports, \"PageModule\", { enumerable: true, get: function () { return pagemodule_2.PageModule; } });\n/**\n * 全局单例的 PageModule 实例\n */\nexports.pageModule = new pagemodule_1.PageModule();\n/**\n * 初始化全局的单例 PageModule\n * @param moduleName - 模块名称\n * @param options    - 模块参数\n * @returns\n */\nfunction init(moduleName, options = {}) {\n    return exports.pageModule.init(moduleName, options);\n}\nexports.init = init;\nvar framework_1 = require(\"./framework\");\nObject.defineProperty(exports, \"callSelfDefinedMethod\", { enumerable: true, get: function () { return framework_1.callSelfDefinedMethod; } });\nObject.defineProperty(exports, \"isInvokeByCloudFunction\", { enumerable: true, get: function () { return framework_1.isInvokeByCloudFunction; } });\nvar cloudbase_1 = require(\"./cloudbase\");\nObject.defineProperty(exports, \"cloudbase\", { enumerable: true, get: function () { return cloudbase_1.cloudbase; } });\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PageModule = void 0;\nconst cloudbase_1 = require(\"./cloudbase\");\nclass PageModule {\n    constructor(moduleName, options) {\n        this.inited = false;\n        if (moduleName) {\n            this.init(moduleName, options);\n        }\n    }\n    init(moduleName, options = {}) {\n        if (this.inited) {\n            throw new Error('[ERROR]PageModule has already been inited, do not repeat initialization.');\n        }\n        this.moduleName = `${moduleName}`;\n        this.env = `$:${moduleName}`;\n        this.initCloudbaseInstance(this.env, options.cloudbaseInstanceInitOptions);\n        this.inited = true;\n        return this;\n    }\n    callMethod(methodName, data, options = {}) {\n        this.checkInited();\n        return this.cloudbaseInstance.callFunction({\n            name: methodName,\n            data: {\n                ...options,\n                moduleName: this.moduleName,\n                envType: options.envType || 'prod',\n                // 数据源参数放到 params 中\n                params: data,\n            },\n        });\n    }\n    database() {\n        return this.cloudbaseInstance.database();\n    }\n    uploadFile(options) {\n    }\n    deleteFile(options) {\n    }\n    downloadFile(options) {\n    }\n    getTempFileURL(options) {\n    }\n    initCloudbaseInstance(env, options = {}) {\n        this.cloudbaseInstance = (0, cloudbase_1.initCloudbaseInstance)(env, options);\n    }\n    checkInited() {\n        if (!this.inited) {\n            throw new Error('[ERROR]PageModule is not inited, please call `init()` method first.');\n        }\n    }\n}\nexports.PageModule = PageModule;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initCloudbaseInstance = exports.initCloudbaseInstanceForWxClient = exports.cloudbase = exports.initCloudbaseInstanceForNodejsForCurrentEnv = exports.initCloudbaseInstanceForNodejs = void 0;\nconst utils_1 = require(\"./utils\");\nconst kBaseSdk = 'wx-server-sdk';\nconst kRuntimeEnv = (0, utils_1.identifyRuntimeEnv)();\n/* eslint-disable max-len */\nfunction initCloudbaseInstanceForNodejs(env, options = {}) {\n    (0, utils_1.checkNodeModuleDependencies)(kBaseSdk);\n    /* eslint-disable @typescript-eslint/no-require-imports */\n    const cloud = require(kBaseSdk);\n    const cloudInstance = cloud.createNewInstance({\n        ...options,\n        env,\n    });\n    return cloudInstance;\n}\nexports.initCloudbaseInstanceForNodejs = initCloudbaseInstanceForNodejs;\nfunction initCloudbaseInstanceForNodejsForCurrentEnv() {\n    if (kRuntimeEnv === utils_1.RuntimeEnv.NODEJS) {\n        (0, utils_1.checkNodeModuleDependencies)(kBaseSdk);\n        /* eslint-disable @typescript-eslint/no-require-imports */\n        const cloud = require(kBaseSdk);\n        return initCloudbaseInstanceForNodejs(cloud.getWXContext().ENV);\n    }\n    return null;\n}\nexports.initCloudbaseInstanceForNodejsForCurrentEnv = initCloudbaseInstanceForNodejsForCurrentEnv;\nexports.cloudbase = initCloudbaseInstanceForNodejsForCurrentEnv();\nfunction initCloudbaseInstanceForWxClient(env, options = {}) {\n    // 微信小程序环境\n    const cloudInstance = new wx.cloud.Cloud({\n        resourceEnv: env,\n    });\n    cloudInstance.init(options);\n    return cloudInstance;\n}\nexports.initCloudbaseInstanceForWxClient = initCloudbaseInstanceForWxClient;\nfunction initCloudbaseInstance(env, options = {}) {\n    if (kRuntimeEnv === utils_1.RuntimeEnv.NODEJS) {\n        return initCloudbaseInstanceForNodejs(env, options);\n    }\n    if (kRuntimeEnv === utils_1.RuntimeEnv.WX_CLIENT) {\n        return initCloudbaseInstanceForWxClient(env, options);\n    }\n    /* eslint-disable max-len */\n    throw new Error('[ERROR] Unknown runtime environment, please use in Node.js or WX_CLIENT environment');\n}\nexports.initCloudbaseInstance = initCloudbaseInstance;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkNodeModuleDependencies = exports.identifyRuntimeEnv = exports.RuntimeEnv = exports.isNodeEnv = exports.isSupportCloudbase = exports.isInWxEnv = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nfunction isInWxEnv() {\n    // window && window.__wxjs_environment\n    return !!__wxConfig;\n}\nexports.isInWxEnv = isInWxEnv;\n/* eslint-enable @typescript-eslint/naming-convention */\nfunction isSupportCloudbase() {\n    return !!wx.cloud;\n}\nexports.isSupportCloudbase = isSupportCloudbase;\nfunction isNodeEnv() {\n    var _a, _b;\n    return ((_b = (_a = global === null || global === void 0 ? void 0 : global.process) === null || _a === void 0 ? void 0 : _a.release) === null || _b === void 0 ? void 0 : _b.name) === 'node';\n}\nexports.isNodeEnv = isNodeEnv;\nvar RuntimeEnv;\n(function (RuntimeEnv) {\n    RuntimeEnv[\"NODEJS\"] = \"nodejs\";\n    RuntimeEnv[\"WX_CLIENT\"] = \"WX_CLIENT\";\n    RuntimeEnv[\"UNKNOWN\"] = \"unknown\";\n})(RuntimeEnv = exports.RuntimeEnv || (exports.RuntimeEnv = {}));\nfunction identifyRuntimeEnv() {\n    // 注意检查顺序：先检查是否在 Node.js 环境，再检查是否在小程序环境\n    if (isNodeEnv()) {\n        return RuntimeEnv.NODEJS;\n    }\n    if (isInWxEnv() && isSupportCloudbase()) {\n        return RuntimeEnv.WX_CLIENT;\n    }\n    return RuntimeEnv.UNKNOWN;\n}\nexports.identifyRuntimeEnv = identifyRuntimeEnv;\nfunction checkNodeModuleDependencies(pkgName) {\n    try {\n        /* eslint-disable @typescript-eslint/no-require-imports */\n        require(pkgName);\n    }\n    catch (e) {\n        if (e.code === 'MODULE_NOT_FOUND') {\n            /* eslint-disable max-len */\n            throw new Error(`[ERROR][${pkgName}] is required for Node.js environment, please install '${pkgName}' first.`);\n        }\n        else {\n            throw e;\n        }\n    }\n}\nexports.checkNodeModuleDependencies = checkNodeModuleDependencies;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.callSelfDefinedMethod = exports.checkInvokePermission = exports.isInvokeByCloudFunction = exports.isInvokeByServerSide = void 0;\nconst cloudbase_1 = require(\"./cloudbase\");\n/**\n * isInvokeByServerSide - 是否调用自服务端 即上一跳是用户自己服务器，包括云函数\n * @param source\n * @returns\n */\nfunction isInvokeByServerSide(source = '') {\n    const { SOURCE } = cloudbase_1.cloudbase.getWXContext();\n    const invokeSource = source || SOURCE || '';\n    // ,not_scf server -> scf\n    // ,not_scf client -> server -> scf\n    // ,scf     client -> scf    -> scf\n    // ,scf     server -> scf\n    // ,scf     server -> scf    -> scf\n    return invokeSource.includes(',');\n}\nexports.isInvokeByServerSide = isInvokeByServerSide;\n/**\n * isInvokeByCloudFunction - 是否调自云函数 即上一跳是云函数\n * @param source\n * @returns\n */\nfunction isInvokeByCloudFunction(source = '') {\n    const { SOURCE } = cloudbase_1.cloudbase.getWXContext();\n    const invokeSource = source || SOURCE || '';\n    return invokeSource && invokeSource.endsWith(',scf');\n}\nexports.isInvokeByCloudFunction = isInvokeByCloudFunction;\n/**\n * checkInvokePermission - 检查调用权限\n * @param source\n * @returns\n */\nfunction checkInvokePermission(source) {\n    // 自定义接口配置时第二步检测接口海鲜时，来源时为 undefined\n    const isFromConsoleInvoke = source === undefined;\n    // 只允许来自云函数/延迟任务的调用，例如以下来源\n    // https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/utils/Cloud.getWXContext.html#%E8%BF%94%E5%9B%9E%E5%80%BC\n    // wx_client,scf wx_client,scf,scf   wx_delaytask\n    return (isInvokeByServerSide(source)) || source === 'wx_delaytask' || isFromConsoleInvoke;\n}\nexports.checkInvokePermission = checkInvokePermission;\nconst kErrorCodes = {\n    PERMISSION_DENIED: 'PERMISSION_DENIED',\n    METHOD_NOT_FOUND: 'METHOD_NOT_FOUND',\n    METHOD_NOT_FUNCTION: 'METHOD_NOT_FUNCTION',\n    METHOD_EXEC_FAILURE: 'METHOD_EXEC_FAILURE',\n    UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n};\n/**\n * 解析出参数\n * @param { object } event - 入参对象\n * @param { string } event.methodName - 具体的接口名，对应于api目录下的文件名，例如，打卡签到模块的自定义接口methodName的枚举值为：sendIntegral、sendPrize\n * @param { object } event.data - 自定义接口的入参\n * @param { object } context - 请求的上下文对象\n * @returns { object } - 返回指定出参对象，必须按下面出参返回\n * @returns { number } code 返回的状态标记，成功返回0， 非0代表错误\n * @returns { string } [msg]  如果成功，则可以不返回，如果失败把相应的错误原因中文描述放在这里\n */\nasync function callSelfDefinedMethod(event, context) {\n    const result = await doCallSelfDefinedMethod(event, context);\n    console.log('CallSelfDefinedMethodResult:', result);\n    return result;\n}\nexports.callSelfDefinedMethod = callSelfDefinedMethod;\nasync function doCallSelfDefinedMethod(event, context) {\n    const { ENV, SOURCE } = cloudbase_1.cloudbase.getWXContext();\n    const { methodName, params } = event;\n    console.log(`[callSelfDefinedMethod]当前环境：${ENV}，调用来源：${SOURCE}，调用方法：${methodName}，入参：${JSON.stringify(params)}`);\n    if (!checkInvokePermission(SOURCE)) {\n        return {\n            code: kErrorCodes.PERMISSION_DENIED,\n            msg: `无权限调用 ${methodName}`,\n        };\n    }\n    try {\n        /* eslint-disable @typescript-eslint/no-require-imports */\n        // 根据自定义接口名，自动路由到 api 目录下的文件实现\n        const path = require('path');\n        const m = require(path.join(process.cwd(), 'api', methodName));\n        let fn = null;\n        if (typeof m === 'function') {\n            fn = m;\n        }\n        else if (typeof m.default === 'function') {\n            fn = m.default;\n        }\n        if (typeof fn !== 'function') {\n            return {\n                code: kErrorCodes.METHOD_NOT_FUNCTION,\n                msg: `自定义方法 ${methodName} 不是一个函数`,\n            };\n        }\n        try {\n            return await fn(params, context);\n        }\n        catch (e) {\n            return {\n                code: kErrorCodes.METHOD_EXEC_FAILURE,\n                msg: `自定义方法 ${methodName} 执行异常：${e.message}`,\n                e,\n            };\n        }\n    }\n    catch (e) {\n        if (e.code === 'MODULE_NOT_FOUND') {\n            return {\n                code: kErrorCodes.METHOD_NOT_FOUND,\n                msg: `自定义方法 ${methodName} 不存在：${e.message}`,\n                e,\n            };\n        }\n        return {\n            code: kErrorCodes.UNKNOWN_ERROR,\n            msg: `未知错误：${e.message}`,\n            e,\n        };\n    }\n}\n"]}